---
title: "Untitled"
format: html
---


import os
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as   
 EC
from flask import Flask, jsonify, request
import requests
import seaborn as sns

# Función para realizar el scraping de datos
def scrape_data():
    PAGINA_PRINCIPAL = "https://www.scrapethissite.com/pages/simple/"
    navegador = webdriver.Chrome()
    navegador.get(PAGINA_PRINCIPAL)
    navegador.implicitly_wait(8)

    datos = []
    try:
        paises = WebDriverWait(navegador, 8).until(
            EC.presence_of_all_elements_located((By.CSS_SELECTOR, '.country'))
        )
        for pais in paises:
            nombre = pais.find_element(By.CSS_SELECTOR, ".country-name").text
            capital = pais.find_element(By.CSS_SELECTOR, ".country-capital").text
            poblacion = int(pais.find_element(By.CSS_SELECTOR, ".country-population").text.replace(',', ''))
            area = float(pais.find_element(By.CSS_SELECTOR, ".country-area").text.replace(',', ''))
            datos.append({
                'nombre': nombre,
                'capital': capital,
                'poblacion': poblacion,
                'area': area
            })
    except Exception as e:
        raise e
    finally:
        navegador.quit()

    df = pd.DataFrame(datos)
    return df

# Ejecutar el scraping y guardar los datos
df = scrape_data()
file_path = os.path.join(os.getcwd(), "paises_exportados.csv")
df.to_csv(file_path, index=False)

# Configuración de la API Flask
app = Flask(__name__)

@app.route('/datos', methods=['GET'])
def obtener_datos():
    df = pd.read_csv("paises_exportados.csv")
    min_poblacion = request.args.get('min_poblacion', default=0, type=int)
    datos_filtrados = df[df['poblacion'] > min_poblacion]
    resultado = datos_filtrados.to_dict(orient='records')
    return jsonify(resultado)

# Ejecutar Flask
if __name__ == '__main__':
    app.run(debug=False)

# Consumir la API y crear gráficos
url = 'http://127.0.0.1:5000/datos'
response = requests.get(url)

if response.status_code == 200:
    datos = response.json()
    df = pd.DataFrame(datos)

    # Mapeo del continente para los países europeos
    continente_mapping = {
        'Alemania': 'Europa', 'Francia': 'Europa', 'Italia': 'Europa',
        'España': 'Europa', 'Reino Unido': 'Europa', 'Portugal': 'Europa',
    }
    df['continente'] = df['nombre'].map(continente_mapping).fillna('Otro')

    # Filtrar los datos para Europa
    df_europa = df[df['continente'] == 'Europa']

    if not df_europa.empty:
        # Gráfico Categórico: Población por Continente
        sns.barplot(x='continente', y='poblacion', data=df_europa, errorbar=None)
        plt.title('Población por Continente')
        plt.show()

        # Gráfico Relacional: Relación entre Área y Población en Europa
        sns.scatterplot(x='area', y='poblacion', data=df_europa)
        plt.title('Relación entre Área y Población en Europa')
        plt.xlabel('Área (km²)')
        plt.ylabel('Población')
        plt.show()

        # Gráfico de Distribución: Distribución de la Población en Europa
        sns.histplot(df_europa['poblacion'])
        plt.title('Distribución de la Población en Europa')
        plt.xlabel('Población')
        plt.show()
